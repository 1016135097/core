// -*- coding: utf-8; mode: groovy -*-

import jp.classmethod.aws.gradle.ec2.AmazonEC2PluginExtension;
import jp.classmethod.aws.gradle.ec2.AmazonEC2ImportKeyTask;
import jp.classmethod.aws.gradle.ec2.AmazonEC2RunInstanceTask;
import jp.classmethod.aws.gradle.ec2.AmazonEC2StartInstanceTask;
import jp.classmethod.aws.gradle.ec2.AmazonEC2StopInstanceTask;
import jp.classmethod.aws.gradle.ec2.AmazonEC2TerminateInstanceTask;
import jp.classmethod.aws.gradle.ec2.AmazonEC2WaitInstanceStatusTask;

import com.amazonaws.AmazonServiceException
import com.amazonaws.services.ec2.AmazonEC2
import com.amazonaws.services.ec2.model.CreateTagsRequest
import com.amazonaws.services.ec2.model.DescribeInstancesRequest
import com.amazonaws.services.ec2.model.DescribeInstancesResult
import com.amazonaws.services.ec2.model.Instance
import com.amazonaws.services.ec2.model.Tag

buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
		classpath "org.hidetake:gradle-ssh-plugin:2.7.0"
		classpath "io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE"
	}
}


apply plugin: "java"
apply plugin: "jp.classmethod.aws.ec2"
apply plugin: "org.hidetake.ssh"


dependencies {
    compile 'com.amazonaws:aws-java-sdk-s3'
}


aws {
	profileName = "default"
	region = "us-west-2"
}

ssh.settings {
	knownHosts = allowAnyHosts
}

def custom = [
	keys : [
		keyName: "aws-dev-2016",
		publicKeyMaterial: "AAAAB3NzaC1yc2EAAAADAQABAAABAQDBaI1i7fdnfh9cUNiqrHVH181BMaWleQDLCi3DWdxzJWJIkWsP2oo+K7nWFKaWIdhzp7BobxInyo09/28YjZxJA4qomAjSF68KVKxvBPlgrkOgaTJnQh7srxtdot2adnLu1jwMzNbQOGHwvV2JdP4q8c56s7GuoG22VeiJ4GncbTidnsc3zwKh8mN7TvMv8U8RtsqQK/js7j0nqDGybobZfuDusIaL1DKX1NlfJ0fuWh8OBuVzDyxFZ58EJwJhSHpNsiVV1i0llueDUJ/ccdExZCxsiidiZI2bxfnIj/SMp6jjBvO5wC/g/jBVH0rtZNq7ALLwMWgNOxG+vlwkuX67",
		privateKeyFile: "aws-dev-2016.pem",
	],
	aws : [
		securityGroupId: "sg-957235ec",

		instanceAmi: "ami-f717b797",
		instanceType: "m3.medium",
		instanceName: "AWS Dev-Test Slave",
	],
	ssh : [
		username: "ec2-user",
	]
]


task importKey(type: AmazonEC2ImportKeyTask) {
	keyName custom.keys.keyName
	publicKeyMaterial custom.keys.publicKeyMaterial
	ifNotExists true
}

if (hasProperty('instanceId') == false) { ext.instanceId = "" }
if (hasProperty('instancePublicDnsName') == false) { ext.instancePublicDnsName = "" }


task launchInstance(type: AmazonEC2RunInstanceTask, dependsOn: importKey) {
	ami custom.aws.instanceAmi
	keyName custom.keys.keyName
	instanceType custom.aws.instanceType

	userData "#! /bin/bash\nyum -y update"

	securityGroupIds = new java.util.ArrayList<String>()
	securityGroupIds += custom.aws.securityGroupId

	doLast {
		project.instanceId = runInstancesResult.getReservation().getInstances().get(0).instanceId

		println("Launched Instance = "+ runInstancesResult.getReservation().getInstances().get(0))
	}
}


task stopInstance(type: AmazonEC2StopInstanceTask) {
	doFirst {
		instanceIds += project.instanceId
	}
}

task startInstance(type: AmazonEC2StartInstanceTask) {
	doFirst {
		instanceIds += project.instanceId
	}
}

task terminateInstance(type: AmazonEC2TerminateInstanceTask) {
	doFirst {
		instanceIds += project.instanceId
	}

	doLast {
		println("Terminated Instance = "+ instanceIds)
	}
}


task waitInstanceStatusLaunched(type: AmazonEC2WaitInstanceStatusTask) {
	loopWait = 2

	doFirst {
		instanceId = project.instanceId
	}

	doLast {
		println("Launched Instance = "+ instanceId)
	}
}

task waitInstanceStatusTerminated(type: AmazonEC2WaitInstanceStatusTask) {
	loopWait = 2

	doFirst {
		instanceId = project.instanceId
	}

	doLast {
		println("Terminated Instance = "+ instanceId)
	}
}


task setupInstance {
	doLast {
		setInstanceTagName(project.instanceId, custom.aws.instanceName)

		sleep(60 * 1000)
	}
}

task describeInstance {
	doLast {
		String publicDnsName = getInstancePublicDnsName(project.instanceId)

		project.instancePublicDnsName = publicDnsName;

		println("Described Instance = "+ publicDnsName )
	}
}


task executeRemoteInstance(dependsOn: describeInstance) {
	doLast {
		ssh.run {
			session(host: project.instancePublicDnsName, user: custom.ssh.username, identity: file(custom.keys.privateKeyFile)) {
				def result = execute "ls -al"
	
				println("Result = "+ result)
			}
		}
	}
}


String getInstancePublicDnsName(String instanceId) {
	DescribeInstancesResult describeInstancesResult = getAmazonEC2Client().describeInstances(
		new DescribeInstancesRequest().withInstanceIds( instanceId )
	)

	String instancePublicDnsName = describeInstancesResult.reservations.instances.get(0).publicDnsName;

	return instancePublicDnsName.substring(1, instancePublicDnsName.length() - 1);
}

void setInstanceTagName(String instanceId, String instanceName) {
	CreateTagsRequest request = new CreateTagsRequest()

    getAmazonEC2Client().createTags(
    	request.withResources( instanceId ).withTags( new Tag( "Name", instanceName ) )
    )
}

AmazonEC2 getAmazonEC2Client() {
	return project.extensions.getByType( AmazonEC2PluginExtension.class ).client
}