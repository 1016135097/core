tinymce.PluginManager.requireLangPack("validation", "en,es");
tinymce.PluginManager.add('validation', function(editor, url) {
	var t = this;
	t.url = url;
	var items = [];
	var guideLineSel='';
	var markSelGuideLine='';
	var defaultGuidLine='';
	
	items.push({ text: "Validation Guidelines", type: "choiceitem" });
	

// function getLang (name, defaultVal, editor) {
// 		return editor.editorManager.i18n.data[(this.settings.language || 'en') + '.' + name] || (defaultVal !== undefined ? defaultVal : '{#' + name + '}');
// }


function validate() {
	if (navigator.appName == "Netscape") var language = navigator.language;
	else var language = navigator.browserLanguage;
	var code = language.substring(0, 2);

	var request = {
		lang: code,
		content: tinyMCE.activeEditor.getContent({ format: "text" }),
		guidelines: guideLineSel,
		fragment: true,
	};
	var idName = "acheck" + tinymce.activeEditor.id;

	var loadDialog = dijit.Dialog({
		title: "Validating",
		content:
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src='/html/images/icons/round-progress-bar.gif' alt='loading'/>",
	});
	loadDialog.show();

	function createValidationResult(response) {
		loadDialog.hide();
		loadDialog.destroy();

		var div = document.createElement("div");
		div.id = idName;
		div.setAttribute("align", "center");
		div.setAttribute(
			"style",
			"height: 340px;overflow: scroll; width: auto;overflow-x: hidden;overflow-y:auto;"
		);
		var text = "";
		var errors = false;
		var msgText = tinymce.EditorManager.i18n.translate("validation.complete");

		if (response.errors.length > 0) {
			errors = true;
			msgText +=
				response.errors.length > 1
					? response.errors.length +
					  tinymce.EditorManager.i18n.translate("validation.errors_found")
					: response.errors.length + tinymce.EditorManager.i18n.translate(
							"validation.error_found"
					  );
		} else {
			msgText += tinymce.EditorManager.i18n.translate(
				"validation.no_errors_found"
			);
		}
		if (response.errors.length > 0) {
			text +=
				"<p style='color:red;'><strong>" +
				tinymce.EditorManager.i18n.translate("validation.table_summary") +
				"" +
				guideLineSel +
				" </strong> </p>";
			var testo = tinymce.EditorManager.i18n.translate(
				"validation.table_description"
			);
			text += "<table border='1' class='listingTable'>";
			text +=
				"<tr> <th>Check ID </th>  " +
				"<th>" +
				testo +
				"</th>" +
				"<th>" +
				tinymce.EditorManager.i18n.translate("validation.table_rowcols") +
				"</th>" +
				"<th>" +
				tinymce.EditorManager.i18n.translate("validation.table_errortype") +
				"</th> </tr>";

			for (var i = 0; i < response.errors.length; i++) {
				var error = response.errors[i];
				var modulo = (i + 1) % 2;
				var classValue = "1";
				if (modulo == 0) {
					classValue = "2";
				}
				var classType = "alternate_" + classValue;
				var idRow = "elem_" + i;
				text += "<tr id='" + idRow + "' class='" + classType + "' >";
				text += "<td class='titleCellDiv'>" + error.check.check_id + "</td>";
				text +=
					"<td> " +
					error.check.err +
					"( " +
					error.check.description +
					" ) </td>";

				text += "<td>" + error.line_number + "/" + error.col_number + "</td>";
				text += "<td>" + error.check.confidenceEnum + "</td>";
				text += "</tr> ";
			}
			text += "</table>";
			div.innerHTML = text;
			var dialog = dijit.Dialog({
				title: msgText,
				content: div,
				style: "width: 640px;",
			});
			dialog.show();
		}
	}
	try {
		ACheckerDWR.validate(request, createValidationResult);
	} catch (e) {
		alert(e);
	}
}

function createGuideline( response  ){
	tinymce.each (response, function (o) {
		if( guideLineSel == '' && o.defaultGuideLine ) defaultGuidLine = o.title;
		items.push({
			text: o.title,
			type: "choiceitem",
			value: {
				title: o.title,
				abbr: o.abbr,
			},
		});
	});
}
		 
ACheckerDWR.getSupportedGudelines(createGuideline); 
editor.ui.registry.addSplitButton("validation", {
		icon: "accessibility-check",
		tooltip: "Achecker Validation",
		fetch: function (callback) {
			callback(items);
		},
		onAction: () => {}, // noop required
		onItemAction: (api, value) => {
			guideLineSel = value.abbr;
			markSelGuideLine = value.title;
			validate();
		},
		select: (value) => {
			if(value) {
				if (markSelGuideLine == "") markSelGuideLine = defaultGuidLine;
				return value.title === markSelGuideLine;
			}
		}
	});
});