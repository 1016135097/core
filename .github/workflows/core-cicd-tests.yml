name: Core
on:
  pull_request:
  push:
    branches:
      - master
      - release-*
      - test-*
jobs:
  run-unit-tests-job:
    name: Unit Tests
    runs-on: ubuntu-latest
    env:
      DOT_CICD_CLOUD_PROVIDER: github
      DOT_CICD_TARGET: core
      EXPORT_REPORTS: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: dotcmsbuild
      GITHUB_USER_TOKEN: ${{ secrets.USER_TOKEN }}
      PULL_REQUEST: ${{ github.event.number }}
    steps:
      - name: Checkout core
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Set Common Vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH="${{ github.head_ref }}"
            COMMIT_MESSG=$(git log -1 --pretty=format:%s)
            echo ::set-env name=CURRENT_BRANCH::"${{ github.head_ref }}"
            echo ::set-env name=commitMsg::$(git log -1 --pretty=format:%s)
          else
            BRANCH=$(basename "${{ github.ref }}")
            COMMIT_MESSG=$(git log --format=%s -n 1 ${{ github.event.after }})
            echo ::set-env name=CURRENT_BRANCH::$(basename "${{ github.ref }}")
            echo ::set-env name=commitMsg::$(git log --format=%s -n 1 ${{ github.event.after }})
          fi

          if [[ "${{ github.event_name }}" == "pull_request" || ${BRANCH} =~ master|^release-.*|^test-.* || ${COMMIT_MESSG} =~ github-all|github-unit ]]; then
            echo ::set-env name=jobRun::'true'
          else
            echo ::set-env name=jobRun::'false'
          fi
      - name: Prepare dot-cicd
        run: |
          chmod +x .cicd/discover.sh && .cicd/discover.sh
        if: env.jobRun == 'true'
      - name: Check Provider
        run: |
          dotcicd/library/checkProvider.sh github
        if: env.jobRun == 'true'
      - name: Fail provider
        run: |
          echo ::set-env name=jobRun::'false'
        if: env.jobRun == 'true' && failure()
      - name: Build Tests Base Image
        run: |
          dotcicd/library/pipeline.sh buildTestsBase
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
        if: env.jobRun == 'true'
      - name: Run Unit Tests
        run: |
          dotcicd/library/pipeline.sh runUnit
        if: env.jobRun == 'true'
  slack-notification:
    name: Notification
    runs-on: ubuntu-latest
    env:
      DOT_CICD_TARGET: core
      GITHUB_USER: dotcmsbuild
      GITHUB_USER_TOKEN: ${{ secrets.USER_TOKEN }}
      PULL_REQUEST: ${{ github.event.number }}
    if: success() || failure()
    needs: [run-unit-tests-job]
    steps:
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Set Common Vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo ::set-env name=CURRENT_BRANCH::"${{ github.head_ref }}"
          else
            echo ::set-env name=CURRENT_BRANCH::$(basename "${{ github.ref }}")
          fi
      - name: Notify through CI/CD slack action
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: dotcms/cicd-slack-action@master
        with:
          github-user: ${{ github.actor }}
          branch: ${{ env.CURRENT_BRANCH }}
